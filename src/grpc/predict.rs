// This file is generated by rust-protobuf 2.8.1. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `proto/predict.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_1;

#[derive(PartialEq,Clone,Default)]
pub struct PredictRequest {
    // message fields
    text: ::protobuf::SingularField<::std::string::String>,
    k: ::std::option::Option<u32>,
    threshold: ::std::option::Option<f32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PredictRequest {
    fn default() -> &'a PredictRequest {
        <PredictRequest as ::protobuf::Message>::default_instance()
    }
}

impl PredictRequest {
    pub fn new() -> PredictRequest {
        ::std::default::Default::default()
    }

    // required string text = 1;


    pub fn get_text(&self) -> &str {
        match self.text.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_text(&mut self) {
        self.text.clear();
    }

    pub fn has_text(&self) -> bool {
        self.text.is_some()
    }

    // Param is passed by value, moved
    pub fn set_text(&mut self, v: ::std::string::String) {
        self.text = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_text(&mut self) -> &mut ::std::string::String {
        if self.text.is_none() {
            self.text.set_default();
        }
        self.text.as_mut().unwrap()
    }

    // Take field
    pub fn take_text(&mut self) -> ::std::string::String {
        self.text.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 k = 2;


    pub fn get_k(&self) -> u32 {
        self.k.unwrap_or(1u32)
    }
    pub fn clear_k(&mut self) {
        self.k = ::std::option::Option::None;
    }

    pub fn has_k(&self) -> bool {
        self.k.is_some()
    }

    // Param is passed by value, moved
    pub fn set_k(&mut self, v: u32) {
        self.k = ::std::option::Option::Some(v);
    }

    // optional float threshold = 3;


    pub fn get_threshold(&self) -> f32 {
        self.threshold.unwrap_or(0.0f32)
    }
    pub fn clear_threshold(&mut self) {
        self.threshold = ::std::option::Option::None;
    }

    pub fn has_threshold(&self) -> bool {
        self.threshold.is_some()
    }

    // Param is passed by value, moved
    pub fn set_threshold(&mut self, v: f32) {
        self.threshold = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for PredictRequest {
    fn is_initialized(&self) -> bool {
        if self.text.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.text)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.k = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.threshold = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.text.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.k {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.threshold {
            my_size += 5;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.text.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(v) = self.k {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.threshold {
            os.write_float(3, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PredictRequest {
        PredictRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "text",
                    |m: &PredictRequest| { &m.text },
                    |m: &mut PredictRequest| { &mut m.text },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "k",
                    |m: &PredictRequest| { &m.k },
                    |m: &mut PredictRequest| { &mut m.k },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                    "threshold",
                    |m: &PredictRequest| { &m.threshold },
                    |m: &mut PredictRequest| { &mut m.threshold },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<PredictRequest>(
                    "PredictRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static PredictRequest {
        static mut instance: ::protobuf::lazy::Lazy<PredictRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const PredictRequest,
        };
        unsafe {
            instance.get(PredictRequest::new)
        }
    }
}

impl ::protobuf::Clear for PredictRequest {
    fn clear(&mut self) {
        self.text.clear();
        self.k = ::std::option::Option::None;
        self.threshold = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PredictRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PredictRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Prediction {
    // message fields
    labels: ::protobuf::RepeatedField<::std::string::String>,
    probs: ::std::vec::Vec<f32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Prediction {
    fn default() -> &'a Prediction {
        <Prediction as ::protobuf::Message>::default_instance()
    }
}

impl Prediction {
    pub fn new() -> Prediction {
        ::std::default::Default::default()
    }

    // repeated string labels = 1;


    pub fn get_labels(&self) -> &[::std::string::String] {
        &self.labels
    }
    pub fn clear_labels(&mut self) {
        self.labels.clear();
    }

    // Param is passed by value, moved
    pub fn set_labels(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.labels = v;
    }

    // Mutable pointer to the field.
    pub fn mut_labels(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.labels
    }

    // Take field
    pub fn take_labels(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.labels, ::protobuf::RepeatedField::new())
    }

    // repeated float probs = 2;


    pub fn get_probs(&self) -> &[f32] {
        &self.probs
    }
    pub fn clear_probs(&mut self) {
        self.probs.clear();
    }

    // Param is passed by value, moved
    pub fn set_probs(&mut self, v: ::std::vec::Vec<f32>) {
        self.probs = v;
    }

    // Mutable pointer to the field.
    pub fn mut_probs(&mut self) -> &mut ::std::vec::Vec<f32> {
        &mut self.probs
    }

    // Take field
    pub fn take_probs(&mut self) -> ::std::vec::Vec<f32> {
        ::std::mem::replace(&mut self.probs, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for Prediction {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.labels)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_float_into(wire_type, is, &mut self.probs)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.labels {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        my_size += 5 * self.probs.len() as u32;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.labels {
            os.write_string(1, &v)?;
        };
        for v in &self.probs {
            os.write_float(2, *v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Prediction {
        Prediction::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "labels",
                    |m: &Prediction| { &m.labels },
                    |m: &mut Prediction| { &mut m.labels },
                ));
                fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                    "probs",
                    |m: &Prediction| { &m.probs },
                    |m: &mut Prediction| { &mut m.probs },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Prediction>(
                    "Prediction",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Prediction {
        static mut instance: ::protobuf::lazy::Lazy<Prediction> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Prediction,
        };
        unsafe {
            instance.get(Prediction::new)
        }
    }
}

impl ::protobuf::Clear for Prediction {
    fn clear(&mut self) {
        self.labels.clear();
        self.probs.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Prediction {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Prediction {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PredictResponse {
    // message fields
    predictions: ::protobuf::RepeatedField<Prediction>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PredictResponse {
    fn default() -> &'a PredictResponse {
        <PredictResponse as ::protobuf::Message>::default_instance()
    }
}

impl PredictResponse {
    pub fn new() -> PredictResponse {
        ::std::default::Default::default()
    }

    // repeated .fasttext_serving.Prediction predictions = 1;


    pub fn get_predictions(&self) -> &[Prediction] {
        &self.predictions
    }
    pub fn clear_predictions(&mut self) {
        self.predictions.clear();
    }

    // Param is passed by value, moved
    pub fn set_predictions(&mut self, v: ::protobuf::RepeatedField<Prediction>) {
        self.predictions = v;
    }

    // Mutable pointer to the field.
    pub fn mut_predictions(&mut self) -> &mut ::protobuf::RepeatedField<Prediction> {
        &mut self.predictions
    }

    // Take field
    pub fn take_predictions(&mut self) -> ::protobuf::RepeatedField<Prediction> {
        ::std::mem::replace(&mut self.predictions, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for PredictResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.predictions {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.predictions)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.predictions {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.predictions {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PredictResponse {
        PredictResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Prediction>>(
                    "predictions",
                    |m: &PredictResponse| { &m.predictions },
                    |m: &mut PredictResponse| { &mut m.predictions },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<PredictResponse>(
                    "PredictResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static PredictResponse {
        static mut instance: ::protobuf::lazy::Lazy<PredictResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const PredictResponse,
        };
        unsafe {
            instance.get(PredictResponse::new)
        }
    }
}

impl ::protobuf::Clear for PredictResponse {
    fn clear(&mut self) {
        self.predictions.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PredictResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PredictResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x13proto/predict.proto\x12\x10fasttext_serving\"V\n\x0ePredictRequest\
    \x12\x12\n\x04text\x18\x01\x20\x02(\tR\x04text\x12\x0f\n\x01k\x18\x02\
    \x20\x01(\r:\x011R\x01k\x12\x1f\n\tthreshold\x18\x03\x20\x01(\x02:\x010R\
    \tthreshold\":\n\nPrediction\x12\x16\n\x06labels\x18\x01\x20\x03(\tR\x06\
    labels\x12\x14\n\x05probs\x18\x02\x20\x03(\x02R\x05probs\"Q\n\x0fPredict\
    Response\x12>\n\x0bpredictions\x18\x01\x20\x03(\x0b2\x1c.fasttext_servin\
    g.PredictionR\x0bpredictions2e\n\x0fFasttextServing\x12R\n\x07predict\
    \x12\x20.fasttext_serving.PredictRequest\x1a!.fasttext_serving.PredictRe\
    sponse\"\0(\x01J\x97\x05\n\x06\x12\x04\0\0\x15\x01\n\x08\n\x01\x0c\x12\
    \x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x02\0\x19\n\n\n\x02\x06\0\x12\x04\
    \x04\0\x06\x01\n\n\n\x03\x06\0\x01\x12\x03\x04\x08\x17\n\x0b\n\x04\x06\0\
    \x02\0\x12\x03\x05\x03B\n\x0c\n\x05\x06\0\x02\0\x01\x12\x03\x05\x07\x0e\
    \n\x0c\n\x05\x06\0\x02\0\x05\x12\x03\x05\x0f\x15\n\x0c\n\x05\x06\0\x02\0\
    \x02\x12\x03\x05\x16$\n\x0c\n\x05\x06\0\x02\0\x03\x12\x03\x05/>\n\n\n\
    \x02\x04\0\x12\x04\x08\0\x0c\x01\n\n\n\x03\x04\0\x01\x12\x03\x08\x08\x16\
    \n\x0b\n\x04\x04\0\x02\0\x12\x03\t\x04\x1d\n\x0c\n\x05\x04\0\x02\0\x04\
    \x12\x03\t\x04\x0c\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\t\r\x13\n\x0c\n\
    \x05\x04\0\x02\0\x01\x12\x03\t\x14\x18\n\x0c\n\x05\x04\0\x02\0\x03\x12\
    \x03\t\x1b\x1c\n\x0b\n\x04\x04\0\x02\x01\x12\x03\n\x04(\n\x0c\n\x05\x04\
    \0\x02\x01\x04\x12\x03\n\x04\x0c\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\n\
    \r\x13\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\n\x14\x15\n\x0c\n\x05\x04\0\
    \x02\x01\x03\x12\x03\n\x18\x19\n\x0c\n\x05\x04\0\x02\x01\x08\x12\x03\n\
    \x1a'\n\x0c\n\x05\x04\0\x02\x01\x07\x12\x03\n%&\n\x0b\n\x04\x04\0\x02\
    \x02\x12\x03\x0b\x041\n\x0c\n\x05\x04\0\x02\x02\x04\x12\x03\x0b\x04\x0c\
    \n\x0c\n\x05\x04\0\x02\x02\x05\x12\x03\x0b\r\x12\n\x0c\n\x05\x04\0\x02\
    \x02\x01\x12\x03\x0b\x13\x1c\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\x0b\
    \x1f\x20\n\x0c\n\x05\x04\0\x02\x02\x08\x12\x03\x0b!0\n\x0c\n\x05\x04\0\
    \x02\x02\x07\x12\x03\x0b,/\n\n\n\x02\x04\x01\x12\x04\x0e\0\x11\x01\n\n\n\
    \x03\x04\x01\x01\x12\x03\x0e\x08\x12\n\x0b\n\x04\x04\x01\x02\0\x12\x03\
    \x0f\x04\x1f\n\x0c\n\x05\x04\x01\x02\0\x04\x12\x03\x0f\x04\x0c\n\x0c\n\
    \x05\x04\x01\x02\0\x05\x12\x03\x0f\r\x13\n\x0c\n\x05\x04\x01\x02\0\x01\
    \x12\x03\x0f\x14\x1a\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x0f\x1d\x1e\n\
    \x0b\n\x04\x04\x01\x02\x01\x12\x03\x10\x04\x1d\n\x0c\n\x05\x04\x01\x02\
    \x01\x04\x12\x03\x10\x04\x0c\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x03\x10\
    \r\x12\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\x10\x13\x18\n\x0c\n\x05\
    \x04\x01\x02\x01\x03\x12\x03\x10\x1b\x1c\n\n\n\x02\x04\x02\x12\x04\x13\0\
    \x15\x01\n\n\n\x03\x04\x02\x01\x12\x03\x13\x08\x17\n\x0b\n\x04\x04\x02\
    \x02\0\x12\x03\x14\x04(\n\x0c\n\x05\x04\x02\x02\0\x04\x12\x03\x14\x04\
    \x0c\n\x0c\n\x05\x04\x02\x02\0\x06\x12\x03\x14\r\x17\n\x0c\n\x05\x04\x02\
    \x02\0\x01\x12\x03\x14\x18#\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03\x14&'\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
